@Scripts.Render("~/backload/blueimp/bootstrap/BasicPlusUI")
@{ 
    bool? isMultipleUplpad = ViewData["multiple"] as bool?;
    string uploadId = ViewData["uploadId"] as string;
    string fileResultIds = ViewData["fileResultIds"] as string;
    string filesContainerId = ViewData["filesContainerId"] as string;
    string url = ViewData["url"] as string;
    string acceptFileTypes = ViewData["acceptFileTypes"] as string;
    string maxFileSize = ViewData["maxFileSize"] as string;
    string inputType = ViewData["inputType"] as string;

    uploadId = uploadId != null ? uploadId : "fileupload";
    fileResultIds = fileResultIds != null ? fileResultIds : "uploadedfile[]";
    filesContainerId = filesContainerId != null ? filesContainerId : "filesContainerId1";
    acceptFileTypes = acceptFileTypes != "image" ? acceptFileTypes : "/(jpg)|(jpeg)|(png)|(gif)";
    maxFileSize = maxFileSize != null ? maxFileSize : "";
}
<div class="row fileupload-buttonbar">
    <div class="col-lg-7" style="padding-top:10px">
        <!-- The fileinput-button span is used to style the file input field as button -->
        <span class="btn btn-success fileinput-button">
            
                @if (inputType != null && inputType == "edit")
                {
                    <i class="glyphicon glyphicon-edit"></i>
                    <span>Edit image</span>
                }
                else
                {
                    <i class="glyphicon glyphicon-plus"></i>
                    <span>Add files...</span>
                }
            
                @if (isMultipleUplpad != null && isMultipleUplpad == false)
                {
                    <input id="@uploadId" type="file" name="files[]" data-url="/File/UploadFiles">
                }
                else
                {
                    <input id="@uploadId" type="file" name="files[]" multiple data-url="/File/UploadFiles">
                }
           
        </span>
        <!-- The global file processing state -->
        <span class="fileupload-process"></span>
    </div>
    <!-- The global progress state -->
    <div class="col-lg-5 fileupload-progress fade">
        <!-- The global progress bar -->
        <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
            <div class="progress-bar progress-bar-success" style="width:0%;"></div>
        </div>
        <!-- The extended global progress state -->
        <div class="progress-extended">&nbsp;</div>
    </div>
</div>
<!-- The table listing the files available for upload/download -->
<table role="presentation" class="table table-striped" style="margin-bottom:0px"><tbody id="@filesContainerId" class="files"></tbody></table>
<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
        @*<td>
            <span class="preview"></span>
        </td*@>
        <td>
            <p class="name">{%=file.name%}</p>
            <strong class="error text-danger"></strong>
        </td>
        <td>
            <p class="size">Processing...</p>
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
        </td>
        <td>
            {% if (!i && !o.options.autoUpload) { %}
            <button class="btn btn-primary start" disabled>
                <i class="glyphicon glyphicon-upload"></i>
                <span>Start</span>
            </button>
            {% } %}
            {% if (!i) { %}
            <button class="btn btn-warning cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-download fade">
        @*<td>
                <span class="preview">
                    {% if (file.thumbnailUrl) { %}
                    <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                    {% } %}
                </span>
            </td>*@
        <td>
            <p class="name">
                {% if (file.url) { %}                
                <a class="image-link" href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" {%=file.thumbnailUrl?'data-gallery':''%}>{%=file.name%}</a>
                 {% } else { %}
                <span>{%=file.name%}</span>
                {% } %}
            </p>
            {% if (file.error) { %}
            <div><span class="label label-danger">Error</span> {%=file.error%}</div>
            {% } %}
        </td>
        <td>
            <span class="size">{%=o.formatFileSize(file.size)%}</span>
        </td>
        <td>
            {% if (file.deleteUrl) { %}
            <button class="btn btn-danger delete" data-type="{%=file.deleteType%}" data-url="{%=file.deleteUrl%}" {% if (file.deletewithcredentials) { %} data-xhr-fields='{"withCredentials":true}' {% } %}>
                <i class="glyphicon glyphicon-trash"></i>
                <span>Delete</span>
            </button>
            @*<input type="checkbox" name="delete" value="1" class="toggle">*@
            {% } else { %}
            <button class="btn btn-warning cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>

<script type="text/javascript">
   
    function initUploadFile(inputTag) {
        'use strict';
        var options = {
            autoUpload: true,
            maxChunkSize: 10000000,                                          // Optional: file chunking with 10MB chunks
            // acceptFileTypes: /(jpg)|(jpeg)|(png)|(gif)|(txt)|(doc)|(docx)|(ppt)|(pptx)|(xls)|(xlsx)|(zip)|(rar)|(7z)|(pdf)$/i,              // Allowed file types
            filesContainer: "#@filesContainerId",
            done: function (e, data) {
                if (e.isDefaultPrevented()) {
                    return false;
                }
                var that = $(this).data('blueimp-fileupload') ||
                        $(this).data('@uploadId'),
                    getFilesFromResponse = data.getFilesFromResponse ||
                        that.options.getFilesFromResponse,
                    files = getFilesFromResponse(data),
                    template,
                    deferred;
                if (data.context) {
                    data.context.each(function (index) {
                        var file = files[index] ||
                                { error: 'Empty file upload result' };
                        $('<input name="@fileResultIds" type="hidden" value="' + file.id + '"/>').appendTo('#@filesContainerId');
                        deferred = that._addFinishedDeferreds();
                        that._transition($(this)).done(
                            function () {
                                var node = $(this);
                                template = that._renderDownload([file])
                                    .replaceAll(node);
                                that._forceReflow(template);
                                that._transition(template).done(
                                    function () {
                                        data.context = $(this);
                                        that._trigger('completed', e, data);
                                        that._trigger('finished', e, data);
                                        deferred.resolve();
                                        $('.image-link').magnificPopup({ type: 'image' });
                                    }
                                );
                            }
                        );
                    });                  
                } else {
                    template = that._renderDownload(files)[
                        that.options.prependFiles ? 'prependTo' : 'appendTo'
                    ](that.options.filesContainer);
                    that._forceReflow(template);
                    deferred = that._addFinishedDeferreds();
                    that._transition(template).done(
                        function () {
                            data.context = $(this);
                            that._trigger('completed', e, data);
                            that._trigger('finished', e, data);
                            deferred.resolve();
                            $('.image-link').magnificPopup({ type: 'image' });
                        }
                    );
                }
            }
        };
        var url = "@url";
        if (url.length > 0) {
            options.url = url;
        }
        var acceptFileTypes = "@acceptFileTypes";
        if (acceptFileTypes != null && acceptFileTypes.length > 0) {
            options.acceptFileTypes = @acceptFileTypes$/i;
        }
        var maxFileSize = "@maxFileSize";
        if(maxFileSize.length>0){
            options.maxFileSize = maxFileSize;
        }
        // Initialize the jQuery File Upload widget:
        inputTag.fileupload(options);
        inputTag.bind('fileuploadsubmit', function (e, data) {
            // Optional: We add a random uuid form parameter. On chunk uploads the uuid is used to store the chunks.
            data.formData = { uuid: Math.random().toString(36).substr(2, 8) };
        });



        //// Load existing files:
        //$('#fileupload').addClass('fileupload-processing');
        //$.ajax({
        //    // Uncomment the following to send cross-domain cookies:
        //    // xhrFields: {withCredentials: true},
        //    url: url,
        //    dataType: 'json',
        //    context: $('#fileupload')[0]
        //}).always(function () {
        //    $(this).removeClass('fileupload-processing');
        //}).done(function (result) {
        //    $(this).fileupload('option', 'done')
        //        .call(this, $.Event('done'), { result: result });
        //});
    };
    initUploadFile($("#@uploadId"));
</script>